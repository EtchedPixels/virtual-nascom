TODO:
- embed the monitor and basic images into the binary

- rpm and pkg installations

- update sdk to forgo warning on MacOS

- UI:
    allow for switching input and output file while running
    support pixel doubling

- snapshot and resume complete machine state

      vnascom -s <state>

    resumes the state in <state> and saves the new state upon exit
    (unless explicitly aborted). The previous state is renamed to
    <state>~ to keep a backup.

    UI: take snapshot, reset, abort, revert

- Precise timings

  A rough, but machine independent job should be easily done.

- Complete the keyboard emulation

  Currently we try hard to map keys to nascom keys.  This has some
  problems as shift goes to shift, e.g. when you press Shift-2 to get
  @, Nascom will actually get 'shift' '2' and make the '"'

  Doing a more standard emulation will loose the possibility of
  emulating shift keys.  Ideally, there should be an invokation flag
  to chose between the two ways of doing it as it really depends on
  the application.  Most won't need the shift event.

- Use autoconfigure

- Emulate sound

  Requires precise timings.

- Complete hardware emulation

  Check other ports that require emulation

- Internal structure

  The current organisation is a bit of a quick hack, but it works
  fairly well.

- Screen: Are Nascom characters really 16 pixels high?

KNOWN ISSUES

- Galaxy Attack doesn't work on Virtual Nascom. As it does work on
  Constantin's Nascom emulator it must be an emulation bug.
